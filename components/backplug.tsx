//Contains code of server api endpoints for payment processing, cart/order processing and possinly more

//template fetch functions for convinience
// /api/cart
async function askCartApi(blob: object){ //assuming blob is always JSON

    return await fetch('/api/cart', {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(blob),
        });

}
// /api/payment
async function askPaymentApi(blob: object){ //assuming blob is always JSON

    return await fetch('/api/payment', {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(blob),
        });

}

//used to check if http submission was successful
async function verifyHttpCode(responseCode: number){

    if (responseCode>=200 && responseCode<=299){
        return 0;//success
    } else {
        return responseCode;//something went wront
    }

}

//calculates the total amount of the whole order
async function calculateOrderTotal(cartItems: string){//cartItems must be in string form of JSON

    var total:number = 0;
    const items = await JSON.parse(cartItems);
    items.forEach((item) => {
        total+=item.totalPrice;
    });

    return total;

}

async function clearOrderId(){  //Delete orderId after successful payment

    localStorage.removeItem('orderId')
}

//Create or update cart data to server
//[DEBUG] cartItems => localStorage.getItem('checkoutParticipants') || JSON.stringify(cartItems)
export async function setOrderState(cartItems: string){

    var currentAction = 'update'//default is always user adding or removing items in cart unless a cart does not exist
    var currentOrderId = await localStorage.getItem('orderId')

    if (currentOrderId==null){//Server **does not** have the state of cart/order

        currentAction = 'create'//create orderId in the server

        const res = await askCartApi({
            action: `${currentAction}`,
            totalPrice: Number(await calculateOrderTotal(cartItems)),
            cart: JSON.parse(cartItems),
        })
        if (res.ok){//Get the Cart ID generated by the server
            const res_json = await res.json();
            localStorage.setItem('orderId', res_json.orderId)
        } else {
            console.log(`${res.status}: cart data was not sent to server due to an error`)
        }

        //Return HTTP code for checking if the data was sent
        return res.status

    } else {//Server **has** the state of cart/order

        const res = await askCartApi({
            action: `${currentAction}`,
            orderId: `${currentOrderId}`,
            totalPrice: Number(await calculateOrderTotal(cartItems)),
            cart: JSON.parse(cartItems),
        })

        //Return HTTP code for checking if the data was sent
        return res.status

    }

}

//Confirm order by sending slip payment to server
export async function sendSlipPayment(slipBlob: string){

    //Check if orderId is set in client before proceeding
    var currentOrderId = await localStorage.getItem('orderId')
    if (currentOrderId==null){
        console.log("SlipPayment: payment cannot be processed without items in cart");
        return -2;
    }

    const res = await askPaymentApi({
        orderId: `${currentOrderId}`,
        payMethod: 'paymentSlip',
        base64Slip: `${slipBlob}`
    });

    clearOrderId()
    return verifyHttpCode(res.status);

}

//[DEBUG][TEMPORARY]Confirm order by credit/debit card
//[DEBUG] migrated from 'paymentgateway' api endpoint. seperate function(s) for BML to be added
export async function startCardTransaction(){

    //Check if orderId is set in client before proceeding
    var currentOrderId = await localStorage.getItem('orderId')
    if (currentOrderId==null){
        console.log("CardPayment: payment cannot be processed without items in cart");
        return -2;
    }

    const res = await askPaymentApi({
        orderId: `${currentOrderId}`,
        payMethod: 'card',
    });

    //verify if submission was successful
    clearOrderId()
    return verifyHttpCode(res.status);

}
